/**
 * This class is generated by jOOQ
 */
package org.openforis.collect.persistence.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.openforis.collect.persistence.jooq.Collect;
import org.openforis.collect.persistence.jooq.Keys;
import org.openforis.collect.persistence.jooq.tables.records.OfcTaxonomyRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfcTaxonomy extends TableImpl<OfcTaxonomyRecord> {

	private static final long serialVersionUID = -321222459;

	/**
	 * The reference instance of <code>collect.ofc_taxonomy</code>
	 */
	public static final OfcTaxonomy OFC_TAXONOMY = new OfcTaxonomy();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<OfcTaxonomyRecord> getRecordType() {
		return OfcTaxonomyRecord.class;
	}

	/**
	 * The column <code>collect.ofc_taxonomy.id</code>.
	 */
	public final TableField<OfcTaxonomyRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>collect.ofc_taxonomy.name</code>.
	 */
	public final TableField<OfcTaxonomyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>collect.ofc_taxonomy.metadata</code>.
	 */
	public final TableField<OfcTaxonomyRecord, String> METADATA = createField("metadata", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>collect.ofc_taxonomy.survey_id</code>.
	 */
	public final TableField<OfcTaxonomyRecord, Integer> SURVEY_ID = createField("survey_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>collect.ofc_taxonomy</code> table reference
	 */
	public OfcTaxonomy() {
		this("ofc_taxonomy", null);
	}

	/**
	 * Create an aliased <code>collect.ofc_taxonomy</code> table reference
	 */
	public OfcTaxonomy(String alias) {
		this(alias, OFC_TAXONOMY);
	}

	private OfcTaxonomy(String alias, Table<OfcTaxonomyRecord> aliased) {
		this(alias, aliased, null);
	}

	private OfcTaxonomy(String alias, Table<OfcTaxonomyRecord> aliased, Field<?>[] parameters) {
		super(alias, Collect.COLLECT, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<OfcTaxonomyRecord> getPrimaryKey() {
		return Keys.OFC_TAXONOMY_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<OfcTaxonomyRecord>> getKeys() {
		return Arrays.<UniqueKey<OfcTaxonomyRecord>>asList(Keys.OFC_TAXONOMY_PKEY, Keys.OFC_TAXONOMY_NAME_KEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<OfcTaxonomyRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<OfcTaxonomyRecord, ?>>asList(Keys.OFC_TAXONOMY__OFC_TAXONOMY_SURVEY_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OfcTaxonomy as(String alias) {
		return new OfcTaxonomy(alias, this);
	}

	/**
	 * Rename this table
	 */
	public OfcTaxonomy rename(String name) {
		return new OfcTaxonomy(name, null);
	}
}
