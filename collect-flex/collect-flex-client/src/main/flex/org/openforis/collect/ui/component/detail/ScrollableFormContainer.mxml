<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent 
					xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   	xmlns:s="library://ns.adobe.com/flex/spark" 
				   	xmlns:mx="library://ns.adobe.com/flex/mx" 
					xmlns:detail="org.openforis.collect.ui.component.detail.*"
					
					width="100%" 
				   	height="100%" 
					
					creationComplete="creationCompleteHandler(event)"
				   >
	
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.openforis.collect.metamodel.proxy.EntityDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.ModelVersionProxy;
			import org.openforis.collect.model.proxy.EntityProxy;
			import org.openforis.collect.util.UIUtil;
			
			private var _entityDefinition:EntityDefinitionProxy;
			private var _modelVersion:ModelVersionProxy;
			private var _nodeDefinitions:IList;
			private var _entity:EntityProxy;
			
			public static const STATE_DEFAULT:String = "default";
			public static const STATE_MULTIPLE_ENTITY:String = "multipleEntity";
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				ChangeWatcher.watch(this, "nodeDefinitions", updateCurrentState);
				updateCurrentState();
			}
			
			protected function updateCurrentState(event:Event = null):void {
				var state:String = STATE_DEFAULT;
				if(nodeDefinitions != null && nodeDefinitions.length == 1) {
					var firstNode:Object = nodeDefinitions.getItemAt(0);
					if(firstNode is EntityDefinitionProxy) {
						var entity:EntityDefinitionProxy = EntityDefinitionProxy(firstNode);
						if(entity.multiple && entity.layout == UIUtil.LAYOUT_TABLE) {
							state = STATE_MULTIPLE_ENTITY;
						}
					}
				}
				currentState = state;
			}
			
			public function resetScrollBars():void {
				if(scroller != null) {
					UIUtil.resetScrollBars(scroller);
				}
			}
			
			[Bindable]
			public function get entityDefinition():EntityDefinitionProxy {
				return _entityDefinition;
			}

			public function set entityDefinition(value:EntityDefinitionProxy):void {
				_entityDefinition = value;
			}

			[Bindable]
			public function get modelVersion():ModelVersionProxy {
				return _modelVersion;
			}
			
			public function set modelVersion(value:ModelVersionProxy):void {
				_modelVersion = value;
			}
			
			[Bindable]
			public function get nodeDefinitions():IList {
				return _nodeDefinitions;
			}
			
			public function set nodeDefinitions(value:IList):void {
				_nodeDefinitions = value;
			}
			
			[Bindable]
			public function get entity():EntityProxy {
				return _entity;
			}
			
			public function set entity(value:EntityProxy):void {
				_entity = value;
			}
			
		]]>
	</fx:Script>
 	
	<s:states>
		<s:State name="default" />
		<s:State name="multipleEntity" />
	</s:states>
	
	<s:DataGroup id="formDataGroup" 
				 height="100%" 
				 width="100%"
				 dataProvider="{nodeDefinitions}" 
				 excludeFrom="default"
				 >
		<s:layout>
			<s:VerticalLayout gap="5" paddingBottom="10" paddingLeft="10" paddingRight="0" paddingRight.multipleEntity="10" paddingTop="10" />
		</s:layout>
		<s:itemRenderer>
			<fx:Component>
				<detail:FormDataGroupItemRenderer
					entity="{parentDocument.entity}"
					modelVersion="{parentDocument.modelVersion}"
					occupyEntirePage="{parentDocument.currentState == ScrollableFormContainer.STATE_MULTIPLE_ENTITY}"
					width="{parentDocument.currentState == ScrollableFormContainer.STATE_MULTIPLE_ENTITY ? parentDocument.width: NaN}"
					height="{parentDocument.currentState == ScrollableFormContainer.STATE_MULTIPLE_ENTITY ? parentDocument.height: NaN}"
					/>
<!--					occupyEntirePage.multipleEntity="true"-->
			</fx:Component>
		</s:itemRenderer>
	</s:DataGroup>
	
	<s:Scroller id="scroller"
				height="100%" 
				width="100%" 
				includeIn="default">
		<s:Group>
			<fx:Reparent target="formDataGroup" includeIn="default" />
		</s:Group>
	</s:Scroller>

</s:NavigatorContent>