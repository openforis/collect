<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" 
					xmlns:detail="org.openforis.collect.ui.component.detail.*"
					xmlns:layout="org.openforis.collect.ui.layout.*"
					width="100%" height="100%"
					creationComplete="creationCompleteHandler(event)"
					creationPolicy="all" 
					>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.collections.ListCollectionView;
			import mx.events.FlexEvent;
			
			import org.openforis.collect.Application;
			import org.openforis.collect.i18n.Message;
			import org.openforis.collect.metamodel.proxy.EntityDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.ModelVersionProxy;
			import org.openforis.collect.metamodel.proxy.NodeDefinitionProxy;
			import org.openforis.collect.model.CollectRecord$Step;
			import org.openforis.collect.model.proxy.EntityProxy;
			import org.openforis.collect.presenter.EntityFormPresenter;
			import org.openforis.collect.ui.UIBuilder;
			import org.openforis.collect.util.CollectionUtil;
			import org.openforis.collect.util.StringUtil;
			import org.openforis.collect.util.UIUtil;
			
			public static const STATE_WITH_TABS:String = "withTabs";
			public static const STATE_WITHOUT_TABS:String = "withoutTabs";
			
			private const MAIN_TAB:Object = new Object();
		
			private var _modelVersion:ModelVersionProxy;
			private var _entityDefinition:EntityDefinitionProxy;
			private var _uiTabs:ListCollectionView;	
			private var _definitionsPerTab:IList;
			private var _parentEntity:EntityProxy;
			private var _entity:EntityProxy;
			private var _entities:IList;
			private var _forms:Array = new Array();
			
			private var _presenter:EntityFormPresenter;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				_presenter = new EntityFormPresenter(this);
			}
			
			public function build():void {
				if(uiTabs == null) {
					this.currentState = STATE_WITHOUT_TABS;
				} else {
					this.currentState = STATE_WITH_TABS;
				}
				initDefinitionsPerTab();
			}
			
			override public function set label(value:String):void {
				super.label = value;
			}
			
			/**
			 * Creates the list of node definitions per each tab
			 * In the first position there will be the node definitions
			 * with uiTabName blank or null
			 */
			private function initDefinitionsPerTab():void {
				var totalTabs:int = 1 + (uiTabs != null ? uiTabs.length: 0);
				//init an empty list for each tab
				var temp:Array = new Array(totalTabs);
				for(var i:int = 0; i < totalTabs; i ++) {
					temp[i] = new ArrayCollection();
				}
				//put each definition in the corresponding list per tab
				var childDefns:IList = UIBuilder.getDefinitionsInVersion(entityDefinition.childDefinitions, modelVersion);
				for each (var defn:NodeDefinitionProxy in childDefns) {
					var tabName:String = defn.uiTabName;
					var index:int = -1;
					if(StringUtil.isBlank(tabName)) {
						index = 0;
					} else if(uiTabs != null) {
						var tabIndex:int = CollectionUtil.getItemIndex(uiTabs, "name", tabName);
						if(tabIndex >= 0) {
							index = tabIndex + 1;
						}
					}
					if(index >= 0) {
						var nodeDefs:IList = temp[index];
						nodeDefs.addItem(defn);
					}
				}
				this.definitionsPerTab = new ArrayCollection(temp);
			}
			
			public function resetScrollbars():void {
				if(currentState == STATE_WITH_TABS) {
					for each(var form:ScrollableFormContainer in formContainers) {
						form.resetScrollBars();
					}
				} else {
					withoutTabsContainer.resetScrollBars();
				}
			}
			
			[Bindable]
			public function get entityDefinition():EntityDefinitionProxy {
				return _entityDefinition;
			}

			public function set entityDefinition(value:EntityDefinitionProxy):void {
				_entityDefinition = value;
			}

			[Bindable]
			public function get modelVersion():ModelVersionProxy {
				return _modelVersion;
			}
			
			public function set modelVersion(value:ModelVersionProxy):void {
				_modelVersion = value;
			}

			[Bindable]
			public function get uiTabs():ListCollectionView {
				return _uiTabs;
			}

			public function set uiTabs(value:ListCollectionView):void {
				_uiTabs = value;
			}

			[Bindable]
			public function get parentEntity():EntityProxy {
				return _parentEntity;
			}
			
			public function set parentEntity(value:EntityProxy):void {
				_parentEntity = value;
			}
			
			[Bindable]
			public function get entity():EntityProxy {
				return _entity;
			}
			
			public function set entity(value:EntityProxy):void {
				_entity = value;
			}
			
			[Bindable]
			public function get definitionsPerTab():IList {
				return _definitionsPerTab;
			}
			
			public function set definitionsPerTab(value:IList):void {
				_definitionsPerTab = value;
			}

			[Bindable]
			public function get entities():IList {
				return _entities;
			}

			public function set entities(value:IList):void {
				_entities = value;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<s:Fade id="showFormEffect" 
				duration="600" 
				alphaFrom="0" 
				alphaTo="1"
				/>
		
		<s:Fade id="hideFormEffect" 
				duration="400" 
				alphaFrom="1" 
				alphaTo="0"
				/>
		
	</fx:Declarations>
	
	<s:states>
		<s:State name="withoutTabs" />
		<s:State name="withTabs" />
	</s:states>
	
	<s:BorderContainer styleName="entityForm"
			width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout gap="4" />
		</s:layout>
		<s:Group id="addSection" 
				 includeInLayout="{entityDefinition.multiple &amp;&amp; entityDefinition.parent != null}" 
				 visible="{entityDefinition.multiple &amp;&amp; entityDefinition.parent != null}">
			<s:layout>
				<s:HorizontalLayout paddingTop="5" horizontalAlign="left" paddingLeft="10" gap="12" verticalAlign="middle" />
			</s:layout>
			<s:Label text="{entityDefinition.getLabelText()}" styleName="bold" />
			<s:DropDownList id="dropDownList"
							prompt="{Message.get('global.dropDownPrompt')}" 
							width="{Math.max(0, entityDefinition.keyAttributeDefinitions.length - 1) * 100 + 150}" 
							labelField="fullKeyText"
							dataProvider="{entities}"
							visible="{entities != null &amp;&amp; entities.length &gt; 0}"
							includeInLayout="{entities != null &amp;&amp; entities.length &gt; 0}"
							/>
			<s:Button id="addButton" 
					  styleName="addButton" 
					  buttonMode="true" 
					  useHandCursor="true"
					  visible="{Application.activeRecordEditable}" 
					  includeInLayout="{Application.activeRecordEditable}" 
					  />
			<s:Button id="deleteButton" 
					  styleName="deleteButton" 
					  buttonMode="true" 
					  useHandCursor="true"
					  visible="{Application.activeRecordEditable &amp;&amp; dropDownList.selectedIndex >= 0}" 
					  includeInLayout="{Application.activeRecordEditable &amp;&amp; dropDownList.selectedIndex >= 0}" 
					  />
		</s:Group>
		<s:Group id="internalContainer" 
				 height="100%" width="100%"
				 showEffect="{showFormEffect}" 
				 hideEffect="{hideFormEffect}"
				 visible="{! entityDefinition.multiple || entityDefinition.parent == null || dropDownList.selectedItem != null}"
				 >
			<s:VGroup id="tabbedContainer" 
					  width="100%" height="100%" 
					  gap="0" 
					  includeIn="withTabs"
					  >
				<s:TabBar id="tabBar" 
						  dataProvider="{viewStack}"
						  width="100%">
					<s:layout>
						<layout:FlowLayout />
					</s:layout>
				</s:TabBar>
				
				<s:BorderContainer
					width="100%" 
					height="100%"
					styleName="entityForm"
					>
					<mx:ViewStack id="viewStack" width="100%" height="100%" 
								  verticalGap="0"
								  creationPolicy="auto">
						<mx:Repeater id="tabsRP" dataProvider="{uiTabs}">
							<detail:ScrollableFormContainer 
								id="formContainers"
								modelVersion="{modelVersion}"
								entityDefinition="{entityDefinition}"
								nodeDefinitions="{IList(definitionsPerTab.getItemAt(tabsRP.currentIndex + 1))}"
								entity="{entity}"
								label="{tabsRP.currentItem.label}"
								/>
						</mx:Repeater>
					</mx:ViewStack>
				</s:BorderContainer>
			</s:VGroup>
			<detail:ScrollableFormContainer 
				id="withoutTabsContainer"
				modelVersion="{modelVersion}"
				entityDefinition="{entityDefinition}"
				nodeDefinitions="{IList(definitionsPerTab.getItemAt(0))}"
				entity="{entity}"
				includeIn="withoutTabs"
				/>
		</s:Group>			
	</s:BorderContainer>
</s:NavigatorContent>
