<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				dataChange="dataChangeHandler(event)" 
				autoDrawBackground="false"
				
				creationComplete="creationCompleteHandler(event)"
				>
	
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import org.openforis.collect.metamodel.proxy.AttributeDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.EntityDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.ModelVersionProxy;
			import org.openforis.collect.model.proxy.EntityProxy;
			import org.openforis.collect.ui.UIBuilder;
			import org.openforis.collect.util.UIUtil;
			
			private var _entity:EntityProxy;
			private var _modelVersion:ModelVersionProxy;
			private var _labelWidth:Number = 150;
			private var _occupyEntirePage:Boolean = false;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				BindingUtils.bindSetter(updateMultipleEntitiesMaxHeight, this, "height");
				BindingUtils.bindSetter(updateMultipleEntitiesMaxWidth, this, "width");
			}
			
			override protected function createChildren():void {
				super.createChildren();
				if(data != null) {
					var formItem:CollectFormItem;
					if(data is AttributeDefinitionProxy) {
						formItem = UIBuilder.getAttributeFormItem(AttributeDefinitionProxy(data));
						formItem.labelWidth = labelWidth;
						addElement(formItem);
					} else if(data is EntityDefinitionProxy) {
						formItem = CollectFormItem(UIBuilder.getEntityFormItem(EntityDefinitionProxy(data)));
						addElement(formItem);
						BindingUtils.bindProperty(formItem, "modelVersion", this, "modelVersion");
					}
					BindingUtils.bindProperty(formItem, "parentEntity", this, "entity");
					BindingUtils.bindProperty(formItem, "occupyEntirePage", this, "occupyEntirePage");
				}
			}
			
			protected function dataChangeHandler(event:FlexEvent):void {
				removeAllElements();
				initialized = false;
				initialize();
			}
			
			protected function updateMultipleEntitiesMaxHeight(value:Number):void {
				var maxAvailableHeight:Number = UIUtil.getMaxAvailableHeight(UIComponent(parentDocument));
				if(!isNaN(maxAvailableHeight)) {
					maxAvailableHeight -= 10; //padding difficult to extimate...
					for(var i:int = 0; i < numElements; i++) {
						var el:IVisualElement = getElementAt(i);
						if(el is MultipleEntityFormItem) {
							MultipleEntityFormItem(el).maxHeight = maxAvailableHeight;
						}
					}
				}
			}
			
			protected function updateMultipleEntitiesMaxWidth(value:Number):void {
				var maxAvailableWidth:Number = UIUtil.getMaxAvailableWidth(UIComponent(parentDocument));
				if(!isNaN(maxAvailableWidth)) {
					maxAvailableWidth -= 10; //padding difficult to extimate...
					if ( ! occupyEntirePage ) {
						maxAvailableWidth -= 15;
					}
					for(var i:int = 0; i < numElements; i++) {
						var el:IVisualElement = getElementAt(i);
						if(el is MultipleEntityFormItem) {
							MultipleEntityFormItem(el).maxWidth = maxAvailableWidth;
						}
					}
				}
			}

			[Bindable]
			public function get entity():EntityProxy {
				return _entity;
			}
			
			public function set entity(value:EntityProxy):void {
				_entity = value;
			}
			
			[Bindable]
			public function get modelVersion():ModelVersionProxy {
				return _modelVersion;
			}
			
			public function set modelVersion(value:ModelVersionProxy):void {
				_modelVersion = value;
			}
			
			[Bindable]
			public function get labelWidth():Number {
				return _labelWidth;
			}
			
			public function set labelWidth(value:Number):void {
				_labelWidth = value;
			}

			[Bindable]
			public function get occupyEntirePage():Boolean {
				return _occupyEntirePage;
			}

			public function set occupyEntirePage(value:Boolean):void {
				_occupyEntirePage = value;
			}
			
		]]>
	</fx:Script>

</s:ItemRenderer>
